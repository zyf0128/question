△ 542次

Java 中垃圾回收机制中如何判断对象需要回收？常见的 GC 回收算法有哪些？


△ 541次

HashMap 与 ConcurrentHashMap 的实现原理是怎样的？ConcurrentHashMap 是如何保证线程安全的？

△ 326次

Synchronized 关键字底层是如何实现的？它与 Lock 相比优缺点分别是什么？

△ 298次

JMM 中内存模型是怎样的？什么是指令序列重排序？

△ 262次

简述 ArrayList 与 LinkedList 的底层实现以及常见操作的时间复杂度

△ 260次

简述 BIO, NIO, AIO 的区别

△ 240次

Java 类的加载流程是怎样的？什么是双亲委派机制？

△ 230次

volatile 关键字解决了什么问题，它的实现原理是什么？

△ 218次

简述 Synchronized，Volatile，可重入锁的不同使用场景及优缺点

△ 185次

实现单例设计模式（懒汉，饿汉）

△ 183次

== 和 equals() 的区别？

△ 174次

线程池是如何实现的？简述线程池的任务策略

△ 168次

简述 Java 的反射机制及其应用场景

△ 166次

简述 Spring AOP 的原理

△ 152次

JVM 内存是如何对应到操作系统内存的？

△ 138次

简述 Spring bean 的生命周期

△ 118次

Java 中接口和抽象类的区别

△ 116次

String，StringBuffer，StringBuilder 之间有什么区别？

△ 108次

ThreadLocal 实现原理是什么？

△ 106次

简述 CAS 原理，什么是 ABA 问题，怎么解决？

△ 104次

简述常见的工厂模式以及单例模式的使用场景

△ 100次

Java 常见锁有哪些？ReetrantLock 是怎么实现的？

△ 94次

String 类能不能被继承？为什么？

△ 90次

HashMap 1.7 / 1.8 的实现区别

△ 84次

什么是公平锁？什么是非公平锁？

△ 84次

简述动态代理与静态代理

△ 82次

Java 是如何实现线程安全的，哪些数据结构是线程安全的？

△ 78次

Spring MVC 的原理和流程

△ 74次

Java 怎么防止内存溢出

△ 74次

简述 Java 锁升级的机制

△ 72次

HashMap 实现原理，为什么使用红黑树？

△ 60次

hashcode 和 equals 方法的联系

△ 58次

什么是重写和重载？

△ 56次

Java 中 sleep() 与 wait() 的区别

△ 56次

什么是内存泄漏，怎么确定内存泄漏？

△ 56次

什么是设计模式，描述几个常用的设计模式

△ 54次

实现单例模式

△ 54次

简述 CMS 与 G1 机制的区别

△ 51次

简述 Java AQS 的原理以及使用场景

△ 50次

集合类中的 List 和 Map 的线程安全版本是什么，如何保证线程安全的？

△ 50次

Java 的线程有哪些状态，转换关系是怎么样的？

△ 48次

Java 异常有哪些类型？

△ 46次

hashmap 和 hashtable 的区别是什么？

△ 38次

简述 Spring 注解的实现原理

△ 36次

Java 线程和操作系统的线程是怎么对应的？Java线程是怎样进行调度的?

△ 34次

Java 线程池里的 arrayblockingqueue 与 linkedblockingqueue 的使用场景和区别

△ 34次

CAS 实现原理是什么？

△ 34次

JVM 是怎么去调优的？了解哪些参数和指令？

△ 32次

简述 Netty 线程模型，Netty 为什么如此高效？

△ 30次

什么是 Java 泛型，有什么作用？

△ 30次

JAVA 创建多线程的方法有哪些？

△ 30次

如何解决 Spring 的循环依赖问题？

△ 28次

简述 Synchronized，volatile，可重入锁的不同使用场景及优缺点

△ 28次

如何优化 JVM 频繁 minor GC

△ 26次

简述 Spring 的 IOC 机制

△ 24次

简述 Dubbo 服务调用过程

△ 24次

简述并实现工厂模式，工厂模式有什么常见问题？

△ 24次

产生死锁的必要条件有哪些？如何解决死锁？

△ 24次

String 为什么是 final 类型？

△ 24次

如何设计 Java 的异常体系？

△ 22次

常用的排序方式有哪些，时间复杂度是多少？

△ 22次

简述装饰者模式以及适配器模式

△ 22次

简述 HashMap 和 TreeMap 的实现原理以及常见操作的时间复杂度

△ 22次

如何设计一个线程池

△ 20次

Java 线程间有多少通信方式？

△ 20次

简述 Java 中 final 关键字的作用

△ 20次

手写生产者消费者模型

△ 20次

简述 HashSet 与 HashMap 的异同

△ 20次

深拷贝与浅拷贝区别是什么？

△ 18次

简述 Spring 的初始化流程

△ 18次

Java 缓冲流 buffer 的用途和原理是什么？

△ 18次

简述 Java 内置排序算法的实现原理

△ 18次

HTTP 中 GET 和 POST 区别

△ 18次

JDK 1.8有什么新特性？

△ 18次

有哪些解决哈希表冲突的方式？

△ 18次

简述 Zookeeper 基础原理以及使用场景

△ 18次

简述标记清除算法的流程

△ 16次

简述 SortedSet 实现原理

△ 16次

Java 有几种基本数据类型，分别占多少字节？

△ 16次

简述 HashSet 实现原理

△ 16次

数组与链表有什么区别？

△ 16次

简述偏向锁以及轻量级锁的区别

△ 16次

如何回收循环依赖的对象

△ 16次

Linux 实现虚拟内存有什么方式？

△ 16次

简述 Java 的序列化和使用场景

△ 16次

String 为什么是 final？

△ 16次

Java 多线程有几种实现方式

△ 16次

如何确定 eden 区的对象何时进入老年代？

△ 16次

Spring MVC 如何处理一个请求？

△ 14次

Java 中 arrayblockingqueue 与 linkedblockingqueue 的用途和区别

△ 14次

简述 Java 的 happen before 原则

△ 14次

SpringBoot 是如何进行自动配置的？

△ 14次

如何判断一个 Hash 函数好不好？

△ 14次

简述使用协程的优点

△ 14次

error 和 exception 的区别是什么？

△ 14次

简述生产者消费者模型

△ 14次

JVM 是怎么去调优的？简述过程和调优的结果

△ 14次

简述读写屏障底层原理

△ 14次

什么是堆内存异常？

△ 14次

简述有哪些同步锁以及它们的实现原理

△ 14次

什么是 Spring 容器，有什么作用？

△ 14次

如何设计一个无锁队列

△ 14次

如何停止一个线程？

△ 14次

在一个静态方法内调用一个非静态成员为什么是非法的？

△ 14次

Spring 是怎么解析 JSON 数据的？

△ 12次

Java 如何高效进行数组拷贝

△ 12次

成员变量和方法的区别？

△ 12次

阻塞队列都有哪几种，有什么区别？

△ 12次

Java 中如何进行 GC 调优？

△ 12次

MVC 模型和 MVVM 模型的区别

△ 12次

Cookie 和 Session 的关系和区别是什么？

△ 12次

简述 Java 的逃逸分析机制

△ 12次

new Integer 和 Integer.valueOf 的区别是什么？

△ 12次

简述 Java 中的自动装箱与拆箱

△ 10次

简单介绍 MyBatis，MyBatis 是如何实现 ORM 映射的

△ 10次

简述 Web socket 与 HTTP 的使用场景

△ 10次

Java 编译后的 .class 文件包含了什么内容？

△ 10次

Java 中 int 的最大值是多少？

△ 10次

简述封装、继承、多态的特性及使用场景